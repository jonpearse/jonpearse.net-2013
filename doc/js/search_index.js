var search_data = {"index":{"searchIndex":["admin","admincontroller","articlescontroller","categoriescontroller","contentcontroller","dashboardcontroller","mediacontroller","pagescontroller","passwordcontroller","adminhelper","applicationcontroller","applicationhelper","article","articlescontroller","category","errorable","media","mediacontroller","page","pagecontroller","preview","string","user","acquire()","admin_t()","after_create()","after_destroy()","after_destroy()","after_sign_in_path_for()","after_sign_out_path_for()","after_update()","article_path()","category_path()","choose()","choose_clause()","choose_clause()","clean()","clean_old()","create()","createable?()","destroy()","drafts()","edit()","edit()","embed()","error_class()","error_messages()","find_first_by_auth_conditions()","first_time()","first_time?()","forbidden()","form_date()","has_error?()","image_url()","index()","index()","index()","latest_articles()","link_to_with_current()","list()","load_archive()","new()","new()","new()","new()","new()","new()","normalize()","not_found()","numeric?()","ping()","preview()","process_media()","publish()","publish!()","regenerate_secret!()","remove_media()","search_clause()","search_clause()","searchable?()","show()","show()","show()","slugify()","sortable()","store()","twofa()","twofa_disable()","twofa_enabled?()","unauthorised()","uncountable?()","unpublish()","update()","update()","view()"],"longSearchIndex":["admin","admin::admincontroller","admin::articlescontroller","admin::categoriescontroller","admin::contentcontroller","admin::dashboardcontroller","admin::mediacontroller","admin::pagescontroller","admin::passwordcontroller","adminhelper","applicationcontroller","applicationhelper","article","articlescontroller","category","errorable","media","mediacontroller","page","pagecontroller","preview","string","user","preview::acquire()","adminhelper#admin_t()","admin::contentcontroller#after_create()","admin::articlescontroller#after_destroy()","admin::contentcontroller#after_destroy()","applicationcontroller#after_sign_in_path_for()","applicationcontroller#after_sign_out_path_for()","admin::contentcontroller#after_update()","applicationhelper#article_path()","applicationhelper#category_path()","admin::contentcontroller#choose()","admin::contentcontroller#choose_clause()","admin::mediacontroller#choose_clause()","preview::clean()","preview::clean_old()","admin::contentcontroller#create()","admin::contentcontroller#createable?()","admin::contentcontroller#destroy()","admin::dashboardcontroller#drafts()","admin::contentcontroller#edit()","admin::passwordcontroller#edit()","admin::contentcontroller#embed()","errorable#error_class()","errorable#error_messages()","user::find_first_by_auth_conditions()","admin::passwordcontroller#first_time()","user#first_time?()","applicationcontroller#forbidden()","applicationhelper#form_date()","errorable#has_error?()","applicationhelper#image_url()","admin::contentcontroller#index()","admin::dashboardcontroller#index()","articlescontroller#index()","admin::dashboardcontroller#latest_articles()","applicationhelper#link_to_with_current()","articlescontroller#list()","article::load_archive()","admin::articlescontroller::new()","admin::categoriescontroller::new()","admin::contentcontroller#new()","admin::contentcontroller::new()","admin::mediacontroller::new()","admin::pagescontroller::new()","string#normalize()","applicationcontroller#not_found()","string#numeric?()","mediacontroller#ping()","admin::contentcontroller#preview()","applicationhelper#process_media()","admin::articlescontroller#publish()","article#publish!()","user#regenerate_secret!()","applicationhelper#remove_media()","admin::contentcontroller#search_clause()","admin::mediacontroller#search_clause()","admin::contentcontroller#searchable?()","admin::contentcontroller#show()","articlescontroller#show()","pagecontroller#show()","string#slugify()","adminhelper#sortable()","preview#store()","admin::passwordcontroller#twofa()","admin::passwordcontroller#twofa_disable()","user#twofa_enabled?()","applicationcontroller#unauthorised()","string#uncountable?()","admin::articlescontroller#unpublish()","admin::contentcontroller#update()","admin::passwordcontroller#update()","mediacontroller#view()"],"info":[["Admin","","classes/Admin.html","",""],["Admin::AdminController","","classes/Admin/AdminController.html","","<p>Superclass for all controllers in the namespace. This provides no\nfunctionality, but simply includes …\n"],["Admin::ArticlesController","","classes/Admin/ArticlesController.html","","<p>Allows CRUD-type management of articles on the site. See ContentController\nfor further information.\n"],["Admin::CategoriesController","","classes/Admin/CategoriesController.html","","<p>Allows CRUD-type management of categories on the site. See\nContentController for further information. …\n"],["Admin::ContentController","","classes/Admin/ContentController.html","","<p>Rather messy superclass that abstracts all basic CRUD-type behaviour into\none place. This means model-specific …\n"],["Admin::DashboardController","","classes/Admin/DashboardController.html","","<p>This is the ‘home’ controller for the Admin namespace.\n"],["Admin::MediaController","","classes/Admin/MediaController.html","","<p>Allows CRUD-type management of media on the site. See ContentController for\nfurther information.\n"],["Admin::PagesController","","classes/Admin/PagesController.html","","<p>Allows CRUD-type management of pages on the site. See ContentController for\nfurther information.\n"],["Admin::PasswordController","","classes/Admin/PasswordController.html","","<p>This is a useful controller that allows us to do things with the user’s\nauthentication tokens without …\n"],["AdminHelper","","classes/AdminHelper.html","","<p>Provides various view functions that might be useful in the Admin section\nof the site.\n"],["ApplicationController","","classes/ApplicationController.html","","<p>Root application controller. This provides a number of useful functions\nthat’re common to all controllers. …\n"],["ApplicationHelper","","classes/ApplicationHelper.html","","<p>Provides view functions used all over the site.\n"],["Article","","classes/Article.html","","<p>This represents a (blog) article within the site.\n"],["ArticlesController","","classes/ArticlesController.html","","<p>Provides majority of front-end functionality surrounding articles on the\nsite.\n"],["Category","","classes/Category.html","","<p>This represents a (blog) category within the articles can exist in many\ncategories, and categories can …\n"],["Errorable","","classes/Errorable.html","","<p>This hooks into ActiveRecord::Base and provides a slightly simpler way of\naccessing Rails’ default error …\n"],["Media","","classes/Media.html","","<p>Represents a media item of some kind within the system.\n<p>At the moment, this only handles images, but at …\n"],["MediaController","","classes/MediaController.html","","<p>This handles serving up responsive media for the site.\n"],["Page","","classes/Page.html","","<p>Represents a static page in the system.\n"],["PageController","","classes/PageController.html","","<p>This is a very simple controller that provides functionality surrounding\npages\n"],["Preview","","classes/Preview.html","","<p>OK, so previews are a little bit of a kludge… a more normal way might be to\nadd a @:preview@ flag to …\n"],["String","","classes/String.html","","<p>Nice utility class that extends Ruby’s core String class with some\nuseful-ish extras.\n<p>Or something\n"],["User","","classes/User.html","",""],["acquire","Preview","classes/Preview.html#method-c-acquire","( model_name, user )","<p>This should be called instead of the constructor, and will return a\nsuitable instance of this class tailored …\n"],["admin_t","AdminHelper","classes/AdminHelper.html#method-i-admin_t","(object, action, subs = {})","<p>A quick and dirty function that produces localised content based on either\na class definition or instance …\n"],["after_create","Admin::ContentController","classes/Admin/ContentController.html#method-i-after_create","( c )","<p>Returns the path to which the user should be redirected after content has\nbeen created. This is provided …\n"],["after_destroy","Admin::ArticlesController","classes/Admin/ArticlesController.html#method-i-after_destroy","(c)",""],["after_destroy","Admin::ContentController","classes/Admin/ContentController.html#method-i-after_destroy","( c )","<p>Returns the path to which the user should be redirected after content has\nbeen destroyed. This is provided …\n"],["after_sign_in_path_for","ApplicationController","classes/ApplicationController.html#method-i-after_sign_in_path_for","(user)","<p>Utility function that overrides devise’s default functionality after a user\nlogs in. In this case, if …\n"],["after_sign_out_path_for","ApplicationController","classes/ApplicationController.html#method-i-after_sign_out_path_for","(user)","<p>Utility function that overrides devise’s default functionality after a user\nlogs out.\n"],["after_update","Admin::ContentController","classes/Admin/ContentController.html#method-i-after_update","( c )","<p>Returns the path to which the user should be redirected after content has\nbeen updated. This is provided …\n"],["article_path","ApplicationHelper","classes/ApplicationHelper.html#method-i-article_path","( article )","<p>Convenience function that returns the URL path for the provided article.\n<p>Parameters\n<p>article &mdash; the Article …\n"],["category_path","ApplicationHelper","classes/ApplicationHelper.html#method-i-category_path","( category )","<p>Convenience function that returns the URL path for the provided category.\n<p>Parameters\n<p>article &mdash; the Category …\n"],["choose","Admin::ContentController","classes/Admin/ContentController.html#method-i-choose","()","<p>Allows a user to ‘choose’ an item of content. The functionality is broadly\nsimilar to #index, but may …\n"],["choose_clause","Admin::ContentController","classes/Admin/ContentController.html#method-i-choose_clause","( conditions )",""],["choose_clause","Admin::MediaController","classes/Admin/MediaController.html#method-i-choose_clause","( conditions )",""],["clean","Preview","classes/Preview.html#method-c-clean","( model_name, user )","<p>Cleans all previews for the given ActiveRecord model and user.\n<p>Parameters\n<p>model_name &mdash; the name of the ActiveRecord …\n"],["clean_old","Preview","classes/Preview.html#method-c-clean_old","()","<p>Utility function that removes all previews older than two hours,\nirrespective of model and user.\n"],["create","Admin::ContentController","classes/Admin/ContentController.html#method-i-create","()","<p>Callback from #new, attempt to persist the new content. If this fails, the\ntemplate for #new is rendered …\n"],["createable?","Admin::ContentController","classes/Admin/ContentController.html#method-i-createable-3F","()","<p>Returns whether this controller should allow the linked content to be\ncontrollable.\n"],["destroy","Admin::ContentController","classes/Admin/ContentController.html#method-i-destroy","()","<p>Destroys (unpersists) the content with the given ID. This has no checking\nand assumes that you meant …\n"],["drafts","Admin::DashboardController","classes/Admin/DashboardController.html#method-i-drafts","()","<p>Returns a list of the five most recently-written unpublished articles\n"],["edit","Admin::ContentController","classes/Admin/ContentController.html#method-i-edit","()","<p>Edit the content specified by the given ID. This hooks into preview\nfunctionality, and will attempt to …\n"],["edit","Admin::PasswordController","classes/Admin/PasswordController.html#method-i-edit","()","<p>Displays a ‘change password’ form to the current user.\n"],["embed","Admin::ContentController","classes/Admin/ContentController.html#method-i-embed","()","<p>Extracts and displays the content with the given ID in an ‘embeddable’\nmanner, otherwise identical to …\n"],["error_class","Errorable","classes/Errorable.html#method-i-error_class","( property )","<p>View helper method that returns ‘error’ if there’s a validation error\nassociated with the provided property. …\n"],["error_messages","Errorable","classes/Errorable.html#method-i-error_messages","( property )","<p>Utility function that concatenates all available validation error messages\nfor the provided property. …\n"],["find_first_by_auth_conditions","User","classes/User.html#method-c-find_first_by_auth_conditions","(warden_conditions)",""],["first_time","Admin::PasswordController","classes/Admin/PasswordController.html#method-i-first_time","()","<p>This renders a view shown to the user the first time they log into the\nsite, prompting them to enable …\n"],["first_time?","User","classes/User.html#method-i-first_time-3F","()",""],["forbidden","ApplicationController","classes/ApplicationController.html#method-i-forbidden","()","<p>Convenience function that renders a 403 page\n"],["form_date","ApplicationHelper","classes/ApplicationHelper.html#method-i-form_date","( date )","<p>Formats a date into the form “Mar 5th, 2013”\n<p>Parameters\n<p>date &mdash; the DateTime object to format\n"],["has_error?","Errorable","classes/Errorable.html#method-i-has_error-3F","( property )","<p>Returns whether or not there is an error associated with the provided\nproperty\n"],["image_url","ApplicationHelper","classes/ApplicationHelper.html#method-i-image_url","( path )","<p>Wraps ActionView::Helpers::AssetUrlHelper#image_path and returns an\nabsolute URL to a specific image, …\n"],["index","Admin::ContentController","classes/Admin/ContentController.html#method-i-index","()","<p>Displays a list of content, optionally sorted by criteria that will vary\nfrom model to model\n<p>Expected …\n"],["index","Admin::DashboardController","classes/Admin/DashboardController.html#method-i-index","()","<p>Produces the admin homepage. Most of the work here is in the view layer…\n"],["index","ArticlesController","classes/ArticlesController.html#method-i-index","()","<p>Renders the five most-recent published articles in the system.\n<p>This is also the default root for the site. …\n"],["latest_articles","Admin::DashboardController","classes/Admin/DashboardController.html#method-i-latest_articles","()","<p>Returns a list of the five most recently-published articles\n"],["link_to_with_current","ApplicationHelper","classes/ApplicationHelper.html#method-i-link_to_with_current","( text, path, options = {} )","<p>Wraps ActionView::Helpers::UrlHelper#link_to to produce a link with an\nadditional ‘current’ style if …\n"],["list","ArticlesController","classes/ArticlesController.html#method-i-list","()","<p>Shows a paginated list of all published articles on the site, optionally\nfiltered either by date (year/month …\n"],["load_archive","Article","classes/Article.html#method-c-load_archive","()","<p>Loads an archive for all published articles on the site. This returns a\nHash, each member of which is …\n"],["new","Admin::ArticlesController","classes/Admin/ArticlesController.html#method-c-new","()",""],["new","Admin::CategoriesController","classes/Admin/CategoriesController.html#method-c-new","()",""],["new","Admin::ContentController","classes/Admin/ContentController.html#method-i-new","()","<p>Create a new item of content.\n"],["new","Admin::ContentController","classes/Admin/ContentController.html#method-c-new","()",""],["new","Admin::MediaController","classes/Admin/MediaController.html#method-c-new","()",""],["new","Admin::PagesController","classes/Admin/PagesController.html#method-c-new","()",""],["normalize","String","classes/String.html#method-i-normalize","()","<p>Returns a normalised version of the string, where all UTF-8/accented/weird\ncharacters are converted to …\n"],["not_found","ApplicationController","classes/ApplicationController.html#method-i-not_found","()","<p>Convenience function that renders a 404 page\n"],["numeric?","String","classes/String.html#method-i-numeric-3F","()","<p>Returns whether or not the string appears to be numeric (ie, is a sequence\nof numbers possibly starting …\n"],["ping","MediaController","classes/MediaController.html#method-i-ping","()","<p>Allows a browser to register its current resolution/breakpoint with the\nsession. This is then used by …\n"],["preview","Admin::ContentController","classes/Admin/ContentController.html#method-i-preview","()","<p>Previews the content with the given ID.\n<p>Expected parameters\n<p>id &mdash; the ID of the Article to publish\n"],["process_media","ApplicationHelper","classes/ApplicationHelper.html#method-i-process_media","( markup )","<p>Goes through text and replaces any dynamic references to Media items with\nappropriate markup.\n<p>Parameters …\n"],["publish","Admin::ArticlesController","classes/Admin/ArticlesController.html#method-i-publish","()","<p>Publishes the Article with the provided ID. Complementary method to\n#unpublish\n<p>Expected parameters\n<p>id &mdash; "],["publish!","Article","classes/Article.html#method-i-publish-21","()","<p>Publishes this article. This sets the @:published@ flag to true, and the\nvalue of the DateTime field …\n"],["regenerate_secret!","User","classes/User.html#method-i-regenerate_secret-21","()",""],["remove_media","ApplicationHelper","classes/ApplicationHelper.html#method-i-remove_media","( markup )","<p>The exact opposite of #process_media—this goes through markup and removes\ndynamic references to Media …\n"],["search_clause","Admin::ContentController","classes/Admin/ContentController.html#method-i-search_clause","()","<p>Returns some kind of content/string that can be used as a @:condition@ for\nActiveRecord#all that allows …\n"],["search_clause","Admin::MediaController","classes/Admin/MediaController.html#method-i-search_clause","()",""],["searchable?","Admin::ContentController","classes/Admin/ContentController.html#method-i-searchable-3F","()","<p>Returns whether this content is searchable. By default, this will return\nfalse if #search_clause is nil. …\n"],["show","Admin::ContentController","classes/Admin/ContentController.html#method-i-show","()","<p>Extracts and displays the content with the provided ID\n<p>Expected parameters\n<p>id &mdash; the ID of the Article to …\n"],["show","ArticlesController","classes/ArticlesController.html#method-i-show","()","<p>Shows the (published) article identified by the provided URL slug\n<p>Expected parameters\n<p>:slug &mdash; the @url_slug …\n"],["show","PageController","classes/PageController.html#method-i-show","()","<p>Shows the Page with the given URL slug. If the specified Page cannot be\nfound, the user is shown a 404 …\n"],["slugify","String","classes/String.html#method-i-slugify","()","<p>Produces a slugified version of this string safe for use in URLs.\n"],["sortable","AdminHelper","classes/AdminHelper.html#method-i-sortable","( column, title = nil )","<p>Creates a header for a table that allows interactive sorting.\n<p>Parameters\n<p>column &mdash; the name of the column …\n"],["store","Preview","classes/Preview.html#method-i-store","( d )","<p>Updates the preview state of the current object.\n<p>Parameters\n<p>d &mdash; the data to store in this preview\n"],["twofa","Admin::PasswordController","classes/Admin/PasswordController.html#method-i-twofa","()","<p>Allows the user to control two-factor authentication.\n"],["twofa_disable","Admin::PasswordController","classes/Admin/PasswordController.html#method-i-twofa_disable","()","<p>Quick utility method that allows the user to disable two-factor\nauthentication.\n"],["twofa_enabled?","User","classes/User.html#method-i-twofa_enabled-3F","()",""],["unauthorised","ApplicationController","classes/ApplicationController.html#method-i-unauthorised","()","<p>Convenience function that renders a 401 page\n"],["uncountable?","String","classes/String.html#method-i-uncountable-3F","()","<p>Returns whether this string is uncountable or not—ie, whether the plural\nand singular forms are identical. …\n"],["unpublish","Admin::ArticlesController","classes/Admin/ArticlesController.html#method-i-unpublish","()","<p>Unpublishes the Article with the provided ID. Complementary method to\n#publish.\n<p>Expected parameters\n<p>id … &mdash; "],["update","Admin::ContentController","classes/Admin/ContentController.html#method-i-update","()","<p>Callback from #update: attempt to persist changes to the specified content.\nIf this fails, the template …\n"],["update","Admin::PasswordController","classes/Admin/PasswordController.html#method-i-update","()","<p>Callback from #edit, that actally changes the user’s password. If this\nfails, the #edit template is rendered …\n"],["view","MediaController","classes/MediaController.html#method-i-view","()","<p>Serves up an appropriately-sized version of the requested Media item.\n<p>By default, this will attempt to …\n"]]}}