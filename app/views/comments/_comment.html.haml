- threading ||= false
%article.o-comment.u-box{ :id => "comment-#{comment.id}", :data => { :parent_id => comment.reply_to_id }, :class => (comment.screened ? '-screened' : '')}
  %header.o-comment__header
    %p.o-comment__metadata
      %strong= link_to_unless comment.website.empty?, comment.name, comment.website, :target => '_blank'
      - unless comment.reply_to_id.nil? or threading
        %span
          in response to
          - if comment.parent.nil?
            %span.deleted   [deleted]
          - elsif comment.parent.screened
            %span.screened  [screened]
          - else
            - url = @comments.nil? || @comments.include?(comment.parent) ? "#comment-#{comment.parent.id}" : article_comments_path(comment.article, comment.parent.id)
            = link_to comment.parent.name, url, :data => { :comment_id => comment.parent.id }, :class => 'back-ref', :rel => "nofollow"
      %br
      %span.u-a11y  at
      %time{ :datetime => comment.created_at.strftime('%FT%T') }
        = form_date comment.created_at, true
    .o-comment__avatar
      = gravatar_for(comment.email, 60).html_safe
  .o-comment__content.u-type.-comment
    ~ comment.comment_rendered.html_safe

  %footer.o-comment__footer
    - if comment.article.commentable?
      = link_to_with_icon 'reply', new_comment_path(comment.article, comment.id), 'reply', :data => { :'comments-action' => :reply }, :class => 'u-btn u-btn--action', :rel => "nofollow"
    - if current_user
      = link_to_with_icon 'edit', edit_comment_path(comment), 'pencil', :data => { :'comments-action' => :edit }, :class => 'u-btn u-btn--action'
      = render :partial => 'comments/screen_link.html.haml', :locals => { :comment => comment }
      = link_to_with_icon 'delete', comment_path(comment), 'trash-o', :data => { :'comments-action' => :delete }, :class => 'u-btn u-btn--action'

  - if threading && comment.children.size > 0
    %ol.o-comment__children
      - comment.children.each do |child|
        %li.o-comment__child
          = render :partial => 'comments/comment', :locals => { :comment => child, :threading => threading }
